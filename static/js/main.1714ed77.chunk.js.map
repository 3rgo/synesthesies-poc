{"version":3,"sources":["Picker.js","Form.js","Score.js","Start.js","App.js","serviceWorker.js","index.js"],"names":["Picker","props","this","colorPicker","iro","ColorPicker","el","on","color","onColorChange","colorPickerState","set","setState","ref","React","Component","Form","steps","onFinish","useState","currentStep","setCurrentStep","setColor","Array","from","length","scores","setScores","endSentence","className","c","rgb","disabled","onClick","sc","cur","style","width","Math","round","Score","totalScore","Object","entries","map","i","type","graphemes","j","g","score","key","keys","window","location","reload","Start","onStart","countLetters","setCountLetters","countNumbers","setCountNumbers","countDays","setCountDays","allGraphemes","letter","k","String","fromCharCode","charCodeAt","number","day","getRandom","arr","n","result","len","taken","RangeError","x","floor","random","onSubmit","e","preventDefault","htmlFor","id","value","onChange","target","min","step","max","App","setGraphemes","setSteps","setTotalScore","newSteps","reduce","all","values","newValues","forEach","v","push","a","shuffleArray","selections","count","sel","abs","console","log","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1714ed77.chunk.js","sourcesContent":["import React from 'react';\nimport iro from '@jaames/iro';\n\nexport default class Picker extends React.Component {\n    componentDidMount() {\n        const { props } = this;\n        // create a new iro color picker and pass component props to it\n        this.colorPicker = new iro.ColorPicker(this.el, props);\n        // call onColorChange prop whenever the color changes\n        this.colorPicker.on('color:change', (color) => {\n            if (props.onColorChange) props.onColorChange(color);\n        });\n    }\n\n    componentDidUpdate() {\n        // isolate color from the rest of the props\n        const { color, ...colorPickerState } = this.props;\n        // update color\n        if (color) this.colorPicker.color.set(color);\n        // push rest of the component props to the colorPicker's state\n        this.colorPicker.setState(colorPickerState);\n    }\n\n    render() {\n        return (\n            <div ref={el => this.el = el} />\n        );\n    }\n}","import React, { useState } from 'react';\nimport Picker from './Picker';\n\nexport default function Form({ steps, onFinish }) {\n\n    const [currentStep, setCurrentStep] = useState(0);\n    const [color, setColor] = useState('#fff');\n    const [scores, setScores] = useState(Array.from({ length: steps.length }, () => (null)));\n\n    let endSentence = '';\n    if(currentStep < steps.length){\n        switch(steps[currentStep][0]){\n        case 'letter':\n            endSentence = 'Ã  la lettre ';\n            break;\n        case 'number':\n            endSentence = 'au chiffre ';\n            break;\n        case 'day':\n            endSentence = 'au jour ';\n            break;\n        default:\n            break;\n        }\n    }\n\n    return (\n        <div className=\"flex flex-col justify-start items-center\">\n            { currentStep < steps.length && (\n                <>\n                    <div className=\"py-2 text-center\">\n                        Quelle couleur associez-vous { endSentence } <b>{steps[currentStep][1]}</b> ?\n                    </div>\n                    <br/>\n                    <Picker\n                        color={ color }\n                        onColorChange={ (c) => { setColor(c.rgb); } }\n                    />\n                    <button\n                        disabled={color === null}\n                        onClick={() => {\n                            // Store score\n                            setScores(sc => {\n                                sc[currentStep] = color;\n                                return sc;\n                            });\n                            // Reset color\n                            setColor('#fff');\n\n                            // Go to next step\n                            setCurrentStep(cur => cur + 1);\n                        }}\n                        className=\"w-full text-center uppercase font-bold my-3 py-3 rounded bg-green-500 text-white hover:bg-green-dark focus:outline-none\"\n                    >\n                            Suivant\n                    </button>\n                </>\n            )}\n            { currentStep >= steps.length && (\n                <button\n                    onClick={() => {\n                        onFinish(scores);\n                    }}\n                    className=\"w-full text-center uppercase font-bold py-3 rounded bg-green-500 text-white hover:bg-green-dark focus:outline-none my-1\"\n                >\n                    Calculer le score\n                </button>\n            )}\n            <div\n                className=\"bg-teal-500 text-xs leading-none py-1 text-center text-gray-700\"\n                style={{\n                    width: Math.round(100*currentStep/steps.length) + '%'\n                }}>\n                {Math.round(100*currentStep/steps.length) + '%'}\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\n\nexport default function Score({ scores, totalScore }) {\n    return (\n        <div className=\"flex flex-col justify-start items-center\">\n            <h2 className=\"text-2xl text-center font-bold tracking-wide mb-4\">RÃ©sultats</h2>\n\n            <table className=\"table-fixed border border-collapse border-gray-800 text-center\">\n                <thead className=\"bg-gray-800 text-white\">\n                    <tr>\n                        <th className=\"w-1/3 py-3 px-4 uppercase font-semibold text-sm\">Type</th>\n                        <th className=\"w-1/3 py-3 px-4 uppercase font-semibold text-sm\">GraphÃ¨me</th>\n                        <th className=\"w-1/3 py-3 px-4 uppercase font-semibold text-sm\">Score</th>\n                    </tr>\n                </thead>\n                <tbody className=\"text-gray-700\">\n                    { Object.entries(scores).map(([type, graphemes], i) => {\n                        return Object.entries(graphemes).map(([g, { score }], j) => (\n                            <tr\n                                key={`row-${j+i*Object.keys(graphemes).length}`}\n                                className={ (j+i*Object.keys(graphemes).length) % 2 !== 0 ? 'bg-gray-200 border-b border-t border-gray-800' : ''}\n                            >\n                                <td className=\"py-3 px-4\">\n                                    { type === 'letter' && 'Lettre'}\n                                    { type === 'number' && 'Chiffre'}\n                                    { type === 'day' && 'Jour'}\n                                </td>\n                                <td className=\"py-3 px-4\">\n                                    { g }\n                                </td>\n                                <td className=\"py-3 px-4\">\n                                    { Math.round(score*100)/100 }\n                                </td>\n                            </tr>\n                        ));\n                    })}\n                </tbody>\n            </table>\n\n            <div className=\"text-lg text-center font-bold tracking-wide my-4\">\n                <u>Score Final :</u> { Math.round(totalScore*100)/100 }\n                <br/>\n                { totalScore <= 1 && 'Vous Ãªtes synesthÃ¨te !'}\n                { totalScore > 1 && 'Vous n\\'Ãªtes pas synesthÃ¨te...'}\n            </div>\n            <button\n                onClick={() => { window.location.reload(); }}\n                className=\"w-full text-center uppercase font-bold py-3 rounded bg-red-500 text-white hover:bg-green-dark focus:outline-none my-1\"\n            >\n                    Recommencer\n            </button>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\n\nexport default function Start({ onStart }) {\n    const [countLetters, setCountLetters] = useState(1);\n    const [countNumbers, setCountNumbers] = useState(1);\n    const [countDays, setCountDays] = useState(1);\n\n    const allGraphemes = {\n        letter: [...Array(26).keys()].map(k => String.fromCharCode('A'.charCodeAt(0) + k)),\n        number: [...Array(10).keys()],\n        day:    ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche']\n    };\n\n    const getRandom = (arr, n) => {\n        var result = new Array(n),\n            len = arr.length,\n            taken = new Array(len);\n        if (n > len)\n            throw new RangeError('getRandom: more elements taken than available');\n        while (n--) {\n            var x = Math.floor(Math.random() * len);\n            result[n] = arr[x in taken ? taken[x] : x];\n            taken[x] = --len in taken ? taken[len] : len;\n        }\n        return result;\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const graphemes = {\n            letter: getRandom(allGraphemes.letter, countLetters),\n            number: getRandom(allGraphemes.number, countNumbers),\n            day:    getRandom(allGraphemes.day, countDays)\n        };\n        onStart(graphemes);\n    };\n\n    return (\n        <form onSubmit={handleSubmit} className=\"flex flex-col justify-start items-stretch\">\n            <label className=\"block uppercase tracking-wide text-grey-darker text-xs font-bold mb-2\" htmlFor=\"lettersCount\">\n                    Nombre de lettres\n            </label>\n            <input\n                className=\"appearance-none block w-full bg-grey-lighter text-grey-darker border border-red rounded py-3 px-4 mb-3\"\n                id=\"lettersCount\"\n                type=\"number\"\n                value={countLetters}\n                onChange={e => setCountLetters(e.target.value)}\n                min=\"1\"\n                step=\"1\"\n                max=\"26\"\n            />\n            <label className=\"block uppercase tracking-wide text-grey-darker text-xs font-bold mb-2\" htmlFor=\"numbersCount\">\n                    Nombre de chiffres\n            </label>\n            <input\n                className=\"appearance-none block w-full bg-grey-lighter text-grey-darker border border-red rounded py-3 px-4 mb-3\"\n                id=\"numbersCount\"\n                type=\"numeric\"\n                value={countNumbers}\n                onChange={e => setCountNumbers(e.target.value)}\n                min=\"1\"\n                step=\"1\"\n                max=\"10\"\n            />\n            <label className=\"block uppercase tracking-wide text-grey-darker text-xs font-bold mb-2\" htmlFor=\"daysCount\">\n                    Nombre de jours\n            </label>\n            <input\n                className=\"appearance-none block w-full bg-grey-lighter text-grey-darker border border-red rounded py-3 px-4 mb-3\"\n                id=\"daysCount\"\n                type=\"numeric\"\n                value={countDays}\n                onChange={e => setCountDays(e.target.value)}\n                min=\"1\"\n                step=\"1\"\n                max=\"26\"\n            />\n\n            <button\n                type=\"submit\"\n                className=\"w-full text-center uppercase font-bold py-3 rounded bg-green-500 text-white hover:bg-green-dark focus:outline-none my-1\"\n            >\n                DÃ©marrer\n            </button>\n        </form>\n    );\n}\n","import React, { useState } from 'react';\nimport Form from './Form';\nimport Score from './Score';\nimport Start from './Start';\n\nfunction App() {\n    const REPETITIONS = 3;\n    const [graphemes, setGraphemes] = useState({});\n    const [steps, setSteps] = useState([]);\n    const [scores, setScores] = useState(null);\n    const [totalScore, setTotalScore] = useState(null);\n\n    const shuffleArray = (a) => {\n        for (let i = a.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [a[i], a[j]] = [a[j], a[i]];\n        }\n        return a;\n    };\n\n    const handleStart = graphemes => {\n        setGraphemes(graphemes);\n\n        const newSteps = Object.entries(graphemes).reduce((all, [type, values]) => {\n            let newValues = [];\n            values.forEach(v => {\n                // eslint-disable-next-line array-callback-return\n                Array.from({ length: REPETITIONS }, () => { newValues.push([type, v]); });\n            });\n            return [...all, ...newValues];\n        }, []);\n        // eslint-disable-next-line array-callback-return\n        Array.from({ length: REPETITIONS }, () => { shuffleArray(newSteps); });\n        setSteps(newSteps);\n    };\n\n    const handleFinish = selections => {\n        // Compute scores\n        let scores = {};\n        let totalScore = 0;\n        let count = 0;\n        Object.entries(graphemes).forEach(([type, values]) => {\n            scores[type] = {};\n            values.forEach(g => {\n                let sel = [];\n\n                for(let i = 0; i < steps.length; i++){\n                    if(steps[i][0] === type && steps[i][1] === g){\n                        sel.push(selections[i]);\n                    }\n                }\n\n                let score = 0;\n                for(var c of ['r', 'g', 'b']){\n                    score += Math.abs(sel[0][c] - sel[1][c])/255 + Math.abs(sel[1][c] - sel[2][c])/255 + Math.abs(sel[2][c] - sel[0][c])/255;\n                }\n\n                scores[type][g] = {\n                    selections: sel,\n                    score:      score\n                };\n                totalScore += score;\n                count++;\n            });\n        });\n        setScores(scores);\n        setTotalScore(totalScore/count);\n        console.log(graphemes, steps, scores);\n    };\n\n    return (\n        <div className=\"h-screen flex justify-center items-center\">\n            <div className=\"max-w-md rounded overflow-hidden shadow-lg p-8 flex flex-col justify-start items-stretch\">\n                <h1 className=\"text-4xl text-center font-bold tracking-wide mb-4 border-b border-gray-600\">SynesthÃ©sies</h1>\n                { scores === null && steps.length === 0 && (<Start onStart={handleStart} />) }\n                { scores === null && steps.length > 0 && (<Form steps={steps} onFinish={handleFinish}/>) }\n                { scores !== null && totalScore !== null && (<Score scores={scores} totalScore={totalScore} />)}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}